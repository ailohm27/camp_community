import json
import argparse
from faker import Faker
from faker.providers import BaseProvider
from rich.console import Console
import os
import pandas as pd

def generate_sample_data(num_profiles=100, parameters_file="./data/parametersBackupData.json", output_file="./data/sampleDataTest2.json"):
    # Initialize Console and Faker
    console = Console()
    fake = Faker('en_US')
    
    # Load parameters from JSON file
    with open(parameters_file, 'r') as f:
        file_data = json.load(f)
    
    # Define a custom provider for backup-related parameters
    class SkillsProvider(BaseProvider):
        def Current_Backup_Products(self):
            return fake.random_element(file_data["Current Backup Products"])
        def IRE_Backup_Products(self):
            return fake.random_element(file_data["IRE Backup Products"])
        def num_of_Backup_Environments(self):
            return fake.random_element(file_data["# of Backup Environments"])
        def technologies_to_Be_Placed_in_Vault(self):
            return fake.random_element(file_data["Technologies to Be Placed in Vault"])
        def Traffic_Allowed(self):
            return fake.random_element(file_data["Traffic Allowed"])
        def Traffic_Blocked(self):
            return fake.random_element(file_data["Traffic Blocked"])
    
    fake.add_provider(SkillsProvider)
    
    console.print("\nSAMPLE DATA GENERATOR\n", style="bold green")
    console.print(f"Generating {num_profiles} backup profiles", style="green")
    
    output = []
    for _ in range(num_profiles):
        profile = {
            "Current Backup Products": fake.Current_Backup_Products(),
            "IRE Backup Products": fake.IRE_Backup_Products(),
            "# of Backup Environment": fake.num_of_Backup_Environments(),
            "Technologies to Be Placed in Vault": fake.technologies_to_Be_Placed_in_Vault(),
            "Traffic Allowed": fake.Traffic_Allowed(),
            "Traffic_Blocked": fake.Traffic_Blocked(),
        }
        output.append(profile)
    
    console.print("Backup profiles generated. Writing to file...", style="green")
    with open(output_file, "w") as f:
        json.dump(output, f, indent=4)

def load_and_display_data(input_file="./data/sampleDataTest2.json"):
    # Load sample data and create a DataFrame
    with open(input_file, 'r') as f:
        data = json.load(f)
    df = pd.DataFrame(data)
    # Display the DataFrame in the console (or Streamlit, if desired)
    console = Console()
    console.print("Sample Backup Data:", style="bold green")
    console.print(df)

if __name__ == "__main__":
    # Optionally, you can add argparse here to allow command-line parameters.
    parser = argparse.ArgumentParser(description="Generate sample backup data for IRE.")
    parser.add_argument("--num_profiles", type=int, default=100, help="Number of backup profiles to generate")
    parser.add_argument("--parameters_file", type=str, default="./data/parametersBackupData.json", help="Path to the parameters JSON file")
    parser.add_argument("--output_file", type=str, default="./data/sampleDataTest2.json", help="Path to output JSON file")
    
    args = parser.parse_args()
    
    generate_sample_data(num_profiles=args.num_profiles, parameters_file=args.parameters_file, output_file=args.output_file)
    load_and_display_data(input_file=args.output_file)