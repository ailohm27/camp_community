import json
import argparse
from faker import Faker
from faker.providers import BaseProvider
from rich.console import Console

def generate_sample_data(num_profiles=20, output_file="./data/sampleDataTest.json", parameters_file="./data/parameters.json"):
    # Initialize console logging and Faker
    console = Console()
    fake = Faker('en_US')

    # Load parameter data from JSON file
    with open(parameters_file, 'r') as f:
        file_data = json.load(f)

    # Define a custom provider for network-related parameters
    class SkillsProvider(BaseProvider):
        def Network_Model(self):
            return self.random_elements(file_data["Network Model"], length=2)
        def Cloud_Environment(self):
            return self.random_elements(file_data["Cloud Environment"], length=2)
        def Num_of_subscriptions(self):
            return self.random_elements(file_data["Num of subscriptions"], length=2)
        def Subscription_Names(self):
            return self.random_elements(file_data["Subscription Names"], length=2)
        def Firewalls(self):
            return self.random_elements(file_data["Firewalls"], length=2)
        def Archival_Storage_Accounts(self):
            return self.random_elements(file_data["Archival Storage Accounts"], length=2)
        def Firewall_Management(self):
            return self.random_elements(file_data["Firewall Management"], length=2)
        def Platform_Services(self):
            return self.random_elements(file_data["Platform Services"], length=2)
        def Critical_Systems(self):
            return self.random_elements(file_data["Critical Systems"], length=2)
        def Compliance_Regulatory_Requirements(self):
            return self.random_elements(file_data["Compliance/Regulatory Requirements"], length=2)
        def Networking_Requirements(self):
            return self.random_elements(file_data["Networking Requirements"], length=2)
        def Num_of_Servers(self):
            return self.random_elements(file_data["# of Servers"], length=2)
        def Server_Type(self):
            return self.random_elements(file_data["Server Type"], length=2)
        def Switches(self):
            return self.random_elements(file_data["Switches"], length=2)
        def Routers(self):
            return self.random_elements(file_data["Routers"], length=2)
        def Storage_Devices(self):
            return self.random_elements(file_data["Storage Devices"], length=2)
        def DNS(self):
            return self.random_elements(file_data["DNS"], length=2)
        def DHCP(self):
            return self.random_elements(file_data["DHCP"], length=2)
        def Default_Gateway(self):
            return self.random_elements(file_data["Default Gateway"], length=2)
        def DNS_Server(self):
            return self.random_elements(file_data["DNS Server"], length=2)
        def Active_Directory(self):
            return self.random_elements(file_data["Active Directory"], length=2)
        def AD_Domain_Controllers(self):
            return self.random_elements(file_data["AD - Domain Controllers"], length=2)
        def AD_Organizational_Units(self):
            return self.random_elements(file_data["AD - Organizational Units"], length=2)
        def Bandwidth(self):
            return self.random_elements(file_data["Bandwidth"], length=2)
        def Latency(self):
            return self.random_elements(file_data["Latency"], length=2)
        def Num_of_Users(self):
            return self.random_elements(file_data["# of Users"], length=2)
        def Num_of_Systems(self):
            return self.random_elements(file_data["# of Systems"], length=2)
        def Backup_Storage_Solution(self):
            return self.random_elements(file_data["Backup Storage Solution"], length=2)
        def User_Roles_with_IRE_Access(self):
            return self.random_elements(file_data["User Roles with IRE Access"], length=2)
        def User_Authentication(self):
            return self.random_elements(file_data["User Authentication"], length=2)
        def User_Authorization(self):
            return self.random_elements(file_data["User Authorization"], length=2)
        def Backup_Products(self):
            return self.random_elements(file_data["Backup Products"], length=2)
        def Num_of_Backup_Environments(self):
            return self.random_elements(file_data["# of Backup Environments"], length=2)
        def Technologies_to_Be_Placed_in_Vault(self):
            return self.random_elements(file_data["Technologies to Be Placed in Vault"], length=2)
        def Azure_Blob(self):
            return self.random_elements(file_data["Azure Blob?"], length=2)
        def Traffic_Allowed_Out(self):
            return self.random_elements(file_data["Traffic Allowed Out"], length=2)
        def SIEM_Tool(self):
            return self.random_elements(file_data["SIEM Tool"], length=2)

    # Add our custom provider to Faker
    fake.add_provider(SkillsProvider)

    # Generate a list of consultant profiles
    output = []
    for _ in range(num_profiles):
        profile = {
            "Network_Model": fake.Network_Model(),
            "Cloud_Environment": fake.Cloud_Environment(),
            "Num_of_subscriptions": fake.Num_of_subscriptions(),
            "Subscription_Names": fake.Subscription_Names(),
            "Firewalls": fake.Firewalls(),
            "Archival_Storage_Accounts": fake.Archival_Storage_Accounts(),
            "Firewall_Management": fake.Firewall_Management(),
            "Platform_Services": fake.Platform_Services(),
            "Critical_Systems": fake.Critical_Systems(),
            "Compliance_Regulatory_Requirements": fake.Compliance_Regulatory_Requirements(),
            "Networking_Requirements": fake.Networking_Requirements(),
            "Num_of_Servers": fake.Num_of_Servers(),
            "Server_Type": fake.Server_Type(),
            "Switches": fake.Switches(),
            "Routers": fake.Routers(),
            "Storage_Devices": fake.Storage_Devices(),
            "DNS": fake.DNS(),
            "DHCP": fake.DHCP(),
            "Default_Gateway": fake.Default_Gateway(),
            "DNS_Server": fake.DNS_Server(),
            "Active_Directory": fake.Active_Directory(),
            "AD_Domain_Controllers": fake.AD_Domain_Controllers(),
            "AD_Organizational_Units": fake.AD_Organizational_Units(),
            "Bandwidth": fake.Bandwidth(),
            "Latency": fake.Latency(),
            "Num_of_Users": fake.Num_of_Users(),
            "Num_of_Systems": fake.Num_of_Systems(),
            "Backup_Storage_Solution": fake.Backup_Storage_Solution(),
            "User_Roles_with_IRE_Access": fake.User_Roles_with_IRE_Access(),
            "User_Authentication": fake.User_Authentication(),
            "User_Authorization": fake.User_Authorization(),
            "Backup_Products": fake.Backup_Products(),
            "Num_of_Backup_Environments": fake.Num_of_Backup_Environments(),
            "Technologies_to_Be_Placed_in_Vault": fake.Technologies_to_Be_Placed_in_Vault(),
            "Azure_Blob": fake.Azure_Blob(),
            "Traffic_Allowed_Out": fake.Traffic_Allowed_Out(),
            "SIEM_Tool": fake.SIEM_Tool(),
        }
        output.append(profile)

    console.print("Consultant profiles generated. Writing to consultant_profiles", style="green")

    # Write the generated profiles to a JSON file
    with open(output_file, "w") as f:
        json.dump(output, f, indent=4)

if __name__ == "__main__":
    # Optionally, add argparse for command-line arguments here if needed.
    generate_sample_data()
