{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">SAMPLE DATA GENERATOR</span>\n",
       "<span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">        </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;32mSAMPLE DATA GENERATOR\u001b[0m\n",
       "\u001b[1;32m        \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">Generating </span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span><span style=\"color: #008000; text-decoration-color: #008000\"> consultant profiles</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32mGenerating \u001b[0m\u001b[1;36m8\u001b[0m\u001b[32m consultant profiles\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">Consultant profiles generated. Writing to consultant_profiles</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[32mConsultant profiles generated. Writing to consultant_profiles\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import json\n",
    "import argparse\n",
    "\n",
    "from faker import Faker\n",
    "from faker.providers import BaseProvider, DynamicProvider\n",
    "from rich.console import Console\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    console = Console()\n",
    "    \n",
    "\n",
    "    console.print(f\"\"\"\n",
    "SAMPLE DATA GENERATOR\n",
    "        \"\"\", style=\"bold green\")\n",
    "    \n",
    "   \n",
    "    kval = 8\n",
    "    \n",
    "    console.print(f\"Generating {kval} consultant profiles\", style=\"green\")\n",
    "\n",
    "    fake = Faker('en_US')\n",
    "\n",
    "    with open(\"./data/base_skills.json\", 'r') as f:\n",
    "        file_data = json.load(f)\n",
    "\n",
    "    \n",
    "    class SkillsProvider(BaseProvider):\n",
    "        def mechanism(self, lengthSet):\n",
    "            return self.random_elements(file_data[\"mechanism\"], length=lengthSet)\n",
    "        \n",
    "        def directionality(self, lengthSet):\n",
    "            return self.random_elements(file_data[\"directionality\"], length=lengthSet)\n",
    "        \n",
    "    fake.add_provider(SkillsProvider)\n",
    "    \n",
    "    output = []\n",
    "    for _ in range(5):\n",
    "        appRelations = fake.random_int(min=1,max=8)\n",
    "        appNameList = []\n",
    "        topicList = []\n",
    "        for _ in range(appRelations):\n",
    "            appNameList.append(\"AppName-\" + str(fake.random_int(min=0, max=100))+ \"\")\n",
    "            topicList.append(fake.unique.word())\n",
    "        obj = {\n",
    "            \"appName1\": \"AppName-\" + str(fake.random_int(min=0, max=100))+ \"\",\n",
    "            \"appName2\": appNameList,\n",
    "            \"directionality\": fake.directionality(appRelations),\n",
    "            \"mechanism\": fake.mechanism(appRelations),\n",
    "            \"topic\" : topicList,\n",
    "        }\n",
    "        output.append(obj)\n",
    "\n",
    "    console.print(f\"Consultant profiles generated. Writing to consultant_profiles\", style=\"green\")\n",
    "    json.dump(output, open(\"./data/consultant_profiles.json\", \"w\"), indent=4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "appName1",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "appName2",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "directionality",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "mechanism",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "topic",
         "rawType": "object",
         "type": "string"
        }
       ],
       "conversionMethod": "pd.DataFrame",
       "ref": "3ce8a126-b904-49c6-b9b4-a63820282983",
       "rows": [
        [
         "0",
         "AppName-79",
         "AppName-33",
         "bi-directional",
         "batch updates",
         "serve"
        ],
        [
         "1",
         "AppName-79",
         "AppName-54",
         "upstream",
         "api",
         "benefit"
        ],
        [
         "2",
         "AppName-79",
         "AppName-39",
         "bi-directional",
         "fileShare",
         "recognize"
        ],
        [
         "3",
         "AppName-9",
         "AppName-41",
         "bi-directional",
         "autosys",
         "enter"
        ],
        [
         "4",
         "AppName-9",
         "AppName-86",
         "bi-directional",
         "autosys",
         "minute"
        ],
        [
         "5",
         "AppName-9",
         "AppName-41",
         "downstream",
         "autosys",
         "edge"
        ],
        [
         "6",
         "AppName-9",
         "AppName-28",
         "downstream",
         "ftp",
         "fall"
        ],
        [
         "7",
         "AppName-9",
         "AppName-36",
         "upstream",
         "ftp",
         "investment"
        ],
        [
         "8",
         "AppName-9",
         "AppName-70",
         "bi-directional",
         "autosys",
         "more"
        ],
        [
         "9",
         "AppName-9",
         "AppName-51",
         "upstream",
         "emails",
         "bad"
        ],
        [
         "10",
         "AppName-36",
         "AppName-21",
         "bi-directional",
         "service bus",
         "food"
        ],
        [
         "11",
         "AppName-36",
         "AppName-71",
         "bi-directional",
         "fileShare",
         "most"
        ],
        [
         "12",
         "AppName-36",
         "AppName-2",
         "bi-directional",
         "service bus",
         "single"
        ],
        [
         "13",
         "AppName-68",
         "AppName-46",
         "upstream",
         "batch updates",
         "week"
        ],
        [
         "14",
         "AppName-91",
         "AppName-55",
         "upstream",
         "autosys",
         "discover"
        ],
        [
         "15",
         "AppName-91",
         "AppName-99",
         "bi-directional",
         "service bus",
         "blue"
        ],
        [
         "16",
         "AppName-91",
         "AppName-85",
         "upstream",
         "service bus",
         "official"
        ],
        [
         "17",
         "AppName-91",
         "AppName-66",
         "upstream",
         "batch updates",
         "control"
        ],
        [
         "18",
         "AppName-91",
         "AppName-26",
         "upstream",
         "api",
         "we"
        ],
        [
         "19",
         "AppName-91",
         "AppName-2",
         "bi-directional",
         "autosys",
         "give"
        ]
       ],
       "shape": {
        "columns": 5,
        "rows": 20
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>appName1</th>\n",
       "      <th>appName2</th>\n",
       "      <th>directionality</th>\n",
       "      <th>mechanism</th>\n",
       "      <th>topic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AppName-79</td>\n",
       "      <td>AppName-33</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>batch updates</td>\n",
       "      <td>serve</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AppName-79</td>\n",
       "      <td>AppName-54</td>\n",
       "      <td>upstream</td>\n",
       "      <td>api</td>\n",
       "      <td>benefit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AppName-79</td>\n",
       "      <td>AppName-39</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>fileShare</td>\n",
       "      <td>recognize</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-41</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>autosys</td>\n",
       "      <td>enter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-86</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>autosys</td>\n",
       "      <td>minute</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-41</td>\n",
       "      <td>downstream</td>\n",
       "      <td>autosys</td>\n",
       "      <td>edge</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-28</td>\n",
       "      <td>downstream</td>\n",
       "      <td>ftp</td>\n",
       "      <td>fall</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-36</td>\n",
       "      <td>upstream</td>\n",
       "      <td>ftp</td>\n",
       "      <td>investment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-70</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>autosys</td>\n",
       "      <td>more</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AppName-9</td>\n",
       "      <td>AppName-51</td>\n",
       "      <td>upstream</td>\n",
       "      <td>emails</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AppName-36</td>\n",
       "      <td>AppName-21</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>service bus</td>\n",
       "      <td>food</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AppName-36</td>\n",
       "      <td>AppName-71</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>fileShare</td>\n",
       "      <td>most</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AppName-36</td>\n",
       "      <td>AppName-2</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>service bus</td>\n",
       "      <td>single</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AppName-68</td>\n",
       "      <td>AppName-46</td>\n",
       "      <td>upstream</td>\n",
       "      <td>batch updates</td>\n",
       "      <td>week</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-55</td>\n",
       "      <td>upstream</td>\n",
       "      <td>autosys</td>\n",
       "      <td>discover</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-99</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>service bus</td>\n",
       "      <td>blue</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-85</td>\n",
       "      <td>upstream</td>\n",
       "      <td>service bus</td>\n",
       "      <td>official</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-66</td>\n",
       "      <td>upstream</td>\n",
       "      <td>batch updates</td>\n",
       "      <td>control</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-26</td>\n",
       "      <td>upstream</td>\n",
       "      <td>api</td>\n",
       "      <td>we</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>AppName-91</td>\n",
       "      <td>AppName-2</td>\n",
       "      <td>bi-directional</td>\n",
       "      <td>autosys</td>\n",
       "      <td>give</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      appName1    appName2  directionality      mechanism       topic\n",
       "0   AppName-79  AppName-33  bi-directional  batch updates       serve\n",
       "1   AppName-79  AppName-54        upstream            api     benefit\n",
       "2   AppName-79  AppName-39  bi-directional      fileShare   recognize\n",
       "3    AppName-9  AppName-41  bi-directional        autosys       enter\n",
       "4    AppName-9  AppName-86  bi-directional        autosys      minute\n",
       "5    AppName-9  AppName-41      downstream        autosys        edge\n",
       "6    AppName-9  AppName-28      downstream            ftp        fall\n",
       "7    AppName-9  AppName-36        upstream            ftp  investment\n",
       "8    AppName-9  AppName-70  bi-directional        autosys        more\n",
       "9    AppName-9  AppName-51        upstream         emails         bad\n",
       "10  AppName-36  AppName-21  bi-directional    service bus        food\n",
       "11  AppName-36  AppName-71  bi-directional      fileShare        most\n",
       "12  AppName-36   AppName-2  bi-directional    service bus      single\n",
       "13  AppName-68  AppName-46        upstream  batch updates        week\n",
       "14  AppName-91  AppName-55        upstream        autosys    discover\n",
       "15  AppName-91  AppName-99  bi-directional    service bus        blue\n",
       "16  AppName-91  AppName-85        upstream    service bus    official\n",
       "17  AppName-91  AppName-66        upstream  batch updates     control\n",
       "18  AppName-91  AppName-26        upstream            api          we\n",
       "19  AppName-91   AppName-2  bi-directional        autosys        give"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import json\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Load the data\n",
    "    with open(\"./data/consultant_profiles.json\", 'r') as f:\n",
    "        data = json.load(f)\n",
    "    \n",
    "    # Create a DataFrame\n",
    "    df = pd.DataFrame(data)\n",
    "    \n",
    "    dfToFill = pd.DataFrame(columns=['appName1', 'appName2', 'directionality', 'mechanism','topic'])\n",
    "    incrementer = 0\n",
    "    for i, row in df.iterrows():\n",
    "        for j in range(len(row['appName2'])):\n",
    "            dfToFill.at[incrementer, 'appName1'] = row['appName1']\n",
    "            dfToFill.at[incrementer, 'appName2'] = row['appName2'][j]\n",
    "            dfToFill.at[incrementer, 'directionality'] = row['directionality'][j]\n",
    "            dfToFill.at[incrementer, 'mechanism'] = row['mechanism'][j]\n",
    "            dfToFill.at[incrementer, 'topic'] = row['topic'][j]\n",
    "            incrementer += 1\n",
    "    \n",
    "    display(dfToFill)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now we run the script and change things to make sense to the current environment\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph generated as relationship_map.svg\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "from graphviz import Digraph\n",
    "\n",
    "\n",
    "\n",
    "# Prompt user for application to map\n",
    "app_to_map = \"all\"\n",
    "\n",
    "# Initialize a directed graph with additional attributes\n",
    "graph_format = 'svg' \n",
    "g = Digraph(format=graph_format, engine='circo', strict=True) # dot, neato, fdp, sfdp, circo, twopi, nop, nop2, osage, patchwork\n",
    "g.attr(compound='true', style='filled', color='deepskyblue', fillcolor='lightskyblue')\n",
    "\n",
    "# Filter the data to include only relevant rows or \"all\" for all applications\n",
    "if app_to_map == \"all\":\n",
    "    filtered_df = dfToFill\n",
    "    app_shape = 'circle'\n",
    "else:\n",
    "    filtered_df = df[(df['App-1'] == app_to_map) | (df['App-2'] == app_to_map)]\n",
    "    app_shape = 'box'\n",
    "    g.node(app_to_map, label=app_to_map, shape=f'{app_shape}', color='deepskyblue', fillcolor='lightskyblue')\n",
    "\n",
    "def get_label(row):\n",
    "    #Generate label for edges using the topic, or blank if NaN.\n",
    "    return f\"{row['topic']}\" if pd.notna(row['topic']) else \"\"\n",
    "\n",
    "# Define colors for mechanisms\n",
    "mechanism_colors = {\n",
    "    \"fileShare\": \"blue\",\n",
    "    \"ftp\": \"red\",\n",
    "    \"api\": \"green\",\n",
    "    \"emails\": \"grey\",\n",
    "    \"autosys\": \"orange\",\n",
    "    \"service bus\": \"purple\",\n",
    "    \"batch updates\": \"brown\",\n",
    "\n",
    "\n",
    "}\n",
    "\n",
    "mechanism_arrow = {\n",
    "    \"fileShare\":\"odot\",\n",
    "    \"ftp\":\"box\",\n",
    "    \"api\":\"diamond\",\n",
    "    \"emails\":\"vee\",\n",
    "    \"autosys\":\"tee\",\n",
    "    \"service bus\":\"crow\",\n",
    "    \"batch updates\":\"normal\",\n",
    "}\n",
    "\n",
    "\n",
    "# Add edges within a subgraph for better organization\n",
    "with g.subgraph(name=\"cluster00\") as relationships:\n",
    "    relationships.attr(label=\"Application Relationships\", style=\"dashed\")\n",
    "    for _, row in filtered_df.iterrows():\n",
    "        style = \"solid\"\n",
    "        arrowhead = \"normal\"\n",
    "        arrowtail = \"normal\"\n",
    "        direction = \"forward\"\n",
    "        \n",
    "        direction_type = str(row['directionality']).strip().lower() if pd.notna(row['directionality']) else \"\"\n",
    "        mechanism_type = str(row['mechanism']).strip().lower() if pd.notna(row['mechanism']) else \"\"\n",
    "        \n",
    "        color = mechanism_colors.get(mechanism_type, \"black\")  # Default to black if no match\n",
    "        arrowhead = mechanism_arrow.get(mechanism_type, \"normal\")  # Default to black if no match\n",
    "\n",
    "                \n",
    "        if direction_type == \"bi-directional\":\n",
    "            style = \"bold\"\n",
    "            direction = \"both\"\n",
    "            arrowtail=arrowhead\n",
    "        elif direction_type == \"depends on\":\n",
    "            style = \"dashed\"\n",
    "            \n",
    "        relationships.edge(row['appName1'], row['appName2'], label=get_label(row), style=style, arrowhead=arrowhead, arrowtail=arrowtail, dir=direction, color=color)\n",
    "\n",
    "# Add a properly structured subgraph for Legend and Mechanism at the bottom\n",
    "\n",
    "'''\n",
    "with g.subgraph(name=\"cluster01\") as legend:\n",
    "    legend.attr(label=\"Legend\", style=\"dashed\")\n",
    "    legend.node(\"Legend\", shape=\"box\")\n",
    "    legend.edge(\"Legend\", \"Bi-Directional\", label=\"Double Arrow\", style=\"bold\", dir=\"both\")\n",
    "    legend.edge(\"Legend\", \"Depends On\", label=\"Dashed Line\", style=\"dashed\")\n",
    "    legend.edge(\"Legend\", \"Normal Flow\", label=\"Solid Line\", style=\"solid\")\n",
    "'''\n",
    "# with g.subgraph(name=\"cluster02\") as invi:\n",
    "#     invi.attr(color=invis, style=invis)\n",
    "#     invi.node(\"Invisible\", shape=\"point\", color=invis, style=invis)\n",
    "   \n",
    "with g.subgraph(name=\"cluster03\") as mechan:\n",
    "    mechan.attr(label=\"Mechanism\", style=\"dashed\")\n",
    "    mechan.node(\"Mechanism\", shape=\"box\")\n",
    "    mechan.edge(\"Mechanism\", \"API\", label=\"Green Diamond\", arrowhead=\"diamond\", color=\"green\")\n",
    "    mechan.edge(\"Mechanism\", \"FTP\", label=\"Red Box\", arrowhead=\"box\", color=\"red\", shape=\"box\")\n",
    "    mechan.edge(\"Mechanism\", \"Fileshare\", label=\"Blue Circle\", arrowhead=\"odot\", color=\"blue\")\n",
    "    mechan.edge(\"Mechanism\", \"Emails\", label=\"Grey Vee\", arrowhead=\"vee\", color=\"grey\")\n",
    "    mechan.edge(\"Mechanism\", \"Autosys\", label=\"Orange Tee\", arrowhead=\"tee\", color=\"orange\")\n",
    "    mechan.edge(\"Mechanism\", \"Service Bus\", label=\"Purple Crow\", arrowhead=\"crow\", color=\"purple\")\n",
    "    mechan.edge(\"Mechanism\", \"Batch Updates\", label=\"Brown Normal\", arrowhead=\"normal\", color=\"brown\")\n",
    "\n",
    "# Save and render the graph\n",
    "g.render(\"relationship_map\")\n",
    "\n",
    "print(f\"Graph generated as relationship_map.{graph_format}\")\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
